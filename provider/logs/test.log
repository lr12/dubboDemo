[INFO ] 2017-11-26 12:35:46,961(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2017-11-26 12:35:52,330(5369) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:35:52,586(5625) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:36:00,131(13170) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:107):  [DUBBO] The service ready on spring started. service: nju.software.interfaces.service.ProviderService, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:00,346(13385) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:00,395(13434) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:00,443(13482) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:36:00,532(13571) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:510):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to local registry, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:36:00,534(13573) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:470):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1196&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511670960210&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:36:00,540(13579) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:481):  [DUBBO] Register dubbo service nju.software.interfaces.service.ProviderService url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1196&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511670960210&version=1.0.0 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=doc-provider-app&dubbo=2.5.3&pid=1196&registry=zookeeper&timestamp=1511670960148, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:00,573(13612) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:00,630(13669) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:00,748(13787) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:00,863(13902) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:00,914(13953) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:01,109(14148) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:70):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:36:01,349(14388) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:69):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.79.140:20880, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:01,376(14415) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:36:01,425(14464) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:232):  [DUBBO] Load registry store file C:\Users\lr12\.dubbo\dubbo-registry-localhost.cache, data: {nju.software.sjjh.mock.GsyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.GsyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.GsyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713426993, nju.software.interfaces.service.ProviderService:2.0.0=dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=7056&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511619882992&version=2.0.0 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=configurators&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1392&revision=2.0.0&side=consumer&timestamp=1511619884876&version=2.0.0 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=routers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1392&revision=2.0.0&side=consumer&timestamp=1511619884876&version=2.0.0, nju.software.sjjh.webservice.IexportdtsService=empty://192.168.237.1:8892/nju.software.sjjh.webservice.IexportdtsService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.webservice.IexportdtsService&methods=login&organization=dubbox&owner=nju-software&pid=312&side=provider&timestamp=1501049192119, nju.software.interfaces.service.ProviderService:1.0.1=empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=providers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=configurators&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=routers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1, nju.software.sjjh.bank.facade.CourtToBankWebService=empty://192.168.237.1:8892/nju.software.sjjh.bank.facade.CourtToBankWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.bank.facade.CourtToBankWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713426536, nju.software.interfaces.service.ProviderService:1.0.0=empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=7056&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511619880685&version=1.0.0, nju.software.sjjh.mock.NyyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.NyyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.NyyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427408, nju.software.sjjh.mock.ZsyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.ZsyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.ZsyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427890, nju.software.interfaces.service.ProviderService=empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12000&retries=1&side=provider&timeout=3000&timestamp=1511593120071, nju.software.sjjh.bank.facade.BankWebService=empty://192.168.237.1:8892/nju.software.sjjh.bank.facade.BankWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.bank.facade.BankWebService&methods=requestAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713418087, nju.software.sjjh.mock.JxgyWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.JxgyWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.JxgyWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427113}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:01,510(14549) --> [main] org.I0Itec.zkclient.ZkConnection.connect(ZkConnection.java:63): Creating new ZookKeeper instance to connect to localhost:2181.  
[INFO ] 2017-11-26 12:36:01,522(14561) --> [ZkClient-EventThread-21-localhost:2181] org.I0Itec.zkclient.ZkEventThread.run(ZkEventThread.java:64): Starting ZkClient event thread.  
[DEBUG] 2017-11-26 12:36:01,592(14631) --> [main] org.I0Itec.zkclient.ZkClient.connect(ZkClient.java:874): Awaiting connection to Zookeeper server  
[DEBUG] 2017-11-26 12:36:01,592(14631) --> [main] org.I0Itec.zkclient.ZkClient.waitForKeeperState(ZkClient.java:628): Waiting for keeper state SyncConnected  
[INFO ] 2017-11-26 12:36:50,944(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2017-11-26 12:36:54,431(3487) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:36:54,783(3839) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:36:59,914(8970) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:107):  [DUBBO] The service ready on spring started. service: nju.software.interfaces.service.ProviderService, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,127(9183) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,162(9218) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,201(9257) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:37:00,232(9288) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:510):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to local registry, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:37:00,232(9288) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:470):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=13920&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671019991&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:37:00,233(9289) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:481):  [DUBBO] Register dubbo service nju.software.interfaces.service.ProviderService url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=13920&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671019991&version=1.0.0 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=doc-provider-app&dubbo=2.5.3&pid=13920&registry=zookeeper&timestamp=1511671019974, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,253(9309) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,273(9329) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,337(9393) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,524(9580) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,603(9659) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:00,739(9795) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:70):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:37:01,007(10063) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:69):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.79.140:20880, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:01,021(10077) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:37:01,055(10111) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:232):  [DUBBO] Load registry store file C:\Users\lr12\.dubbo\dubbo-registry-localhost.cache, data: {nju.software.sjjh.mock.GsyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.GsyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.GsyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713426993, nju.software.interfaces.service.ProviderService:2.0.0=dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=7056&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511619882992&version=2.0.0 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=configurators&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1392&revision=2.0.0&side=consumer&timestamp=1511619884876&version=2.0.0 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=routers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1392&revision=2.0.0&side=consumer&timestamp=1511619884876&version=2.0.0, nju.software.sjjh.webservice.IexportdtsService=empty://192.168.237.1:8892/nju.software.sjjh.webservice.IexportdtsService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.webservice.IexportdtsService&methods=login&organization=dubbox&owner=nju-software&pid=312&side=provider&timestamp=1501049192119, nju.software.interfaces.service.ProviderService:1.0.1=empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=providers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=configurators&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=routers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1, nju.software.sjjh.bank.facade.CourtToBankWebService=empty://192.168.237.1:8892/nju.software.sjjh.bank.facade.CourtToBankWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.bank.facade.CourtToBankWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713426536, nju.software.interfaces.service.ProviderService:1.0.0=empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=7056&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511619880685&version=1.0.0, nju.software.sjjh.mock.NyyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.NyyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.NyyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427408, nju.software.sjjh.mock.ZsyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.ZsyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.ZsyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427890, nju.software.interfaces.service.ProviderService=empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12000&retries=1&side=provider&timeout=3000&timestamp=1511593120071, nju.software.sjjh.bank.facade.BankWebService=empty://192.168.237.1:8892/nju.software.sjjh.bank.facade.BankWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.bank.facade.BankWebService&methods=requestAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713418087, nju.software.sjjh.mock.JxgyWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.JxgyWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.JxgyWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427113}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:37:01,170(10226) --> [main] org.I0Itec.zkclient.ZkConnection.connect(ZkConnection.java:63): Creating new ZookKeeper instance to connect to localhost:2181.  
[INFO ] 2017-11-26 12:37:01,182(10238) --> [ZkClient-EventThread-21-localhost:2181] org.I0Itec.zkclient.ZkEventThread.run(ZkEventThread.java:64): Starting ZkClient event thread.  
[DEBUG] 2017-11-26 12:37:01,274(10330) --> [main] org.I0Itec.zkclient.ZkClient.connect(ZkClient.java:874): Awaiting connection to Zookeeper server  
[DEBUG] 2017-11-26 12:37:01,282(10338) --> [main] org.I0Itec.zkclient.ZkClient.waitForKeeperState(ZkClient.java:628): Waiting for keeper state SyncConnected  
[INFO ] 2017-11-26 12:39:16,826(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2017-11-26 12:39:20,670(3844) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:21,097(4271) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:39:27,149(10323) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:107):  [DUBBO] The service ready on spring started. service: nju.software.interfaces.service.ProviderService, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:27,355(10529) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:27,405(10579) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:27,435(10609) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:39:27,483(10657) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:510):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to local registry, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:39:27,484(10658) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:470):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=816&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671167186&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:39:29,177(12351) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:481):  [DUBBO] Register dubbo service nju.software.interfaces.service.ProviderService url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=816&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671167186&version=1.0.0 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=doc-provider-app&dubbo=2.5.3&pid=816&registry=zookeeper&timestamp=1511671167172, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:29,187(12361) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:29,215(12389) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:29,360(12534) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:29,518(12692) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:29,553(12727) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:29,639(12813) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:70):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:39:29,884(13058) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:69):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.79.140:20880, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:29,897(13071) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:39:29,945(13119) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:232):  [DUBBO] Load registry store file C:\Users\lr12\.dubbo\dubbo-registry-localhost.cache, data: {nju.software.sjjh.mock.GsyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.GsyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.GsyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713426993, nju.software.interfaces.service.ProviderService:2.0.0=dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=7056&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511619882992&version=2.0.0 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=configurators&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1392&revision=2.0.0&side=consumer&timestamp=1511619884876&version=2.0.0 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=routers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1392&revision=2.0.0&side=consumer&timestamp=1511619884876&version=2.0.0, nju.software.sjjh.webservice.IexportdtsService=empty://192.168.237.1:8892/nju.software.sjjh.webservice.IexportdtsService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.webservice.IexportdtsService&methods=login&organization=dubbox&owner=nju-software&pid=312&side=provider&timestamp=1501049192119, nju.software.interfaces.service.ProviderService:1.0.1=empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=providers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=configurators&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=routers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1, nju.software.sjjh.bank.facade.CourtToBankWebService=empty://192.168.237.1:8892/nju.software.sjjh.bank.facade.CourtToBankWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.bank.facade.CourtToBankWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713426536, nju.software.interfaces.service.ProviderService:1.0.0=empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=7056&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511619880685&version=1.0.0, nju.software.sjjh.mock.NyyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.NyyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.NyyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427408, nju.software.sjjh.mock.ZsyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.ZsyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.ZsyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427890, nju.software.interfaces.service.ProviderService=empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12000&retries=1&side=provider&timeout=3000&timestamp=1511593120071, nju.software.sjjh.bank.facade.BankWebService=empty://192.168.237.1:8892/nju.software.sjjh.bank.facade.BankWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.bank.facade.BankWebService&methods=requestAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713418087, nju.software.sjjh.mock.JxgyWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.JxgyWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.JxgyWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427113}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:39:30,013(13187) --> [main] org.I0Itec.zkclient.ZkConnection.connect(ZkConnection.java:63): Creating new ZookKeeper instance to connect to localhost:2181.  
[INFO ] 2017-11-26 12:39:30,016(13190) --> [ZkClient-EventThread-21-localhost:2181] org.I0Itec.zkclient.ZkEventThread.run(ZkEventThread.java:64): Starting ZkClient event thread.  
[DEBUG] 2017-11-26 12:39:30,122(13296) --> [main] org.I0Itec.zkclient.ZkClient.connect(ZkClient.java:874): Awaiting connection to Zookeeper server  
[DEBUG] 2017-11-26 12:39:30,129(13303) --> [main] org.I0Itec.zkclient.ZkClient.waitForKeeperState(ZkClient.java:628): Waiting for keeper state SyncConnected  
[INFO ] 2017-11-26 12:40:18,879(0) --> [main] : using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter  
[DEBUG] 2017-11-26 12:40:23,435(4556) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:23,682(4803) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:40:29,339(10460) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:107):  [DUBBO] The service ready on spring started. service: nju.software.interfaces.service.ProviderService, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,494(10615) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,530(10651) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,567(10688) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:40:29,602(10723) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:510):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to local registry, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:40:29,603(10724) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:470):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:40:29,607(10728) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:481):  [DUBBO] Register dubbo service nju.software.interfaces.service.ProviderService url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=doc-provider-app&dubbo=2.5.3&pid=16004&registry=zookeeper&timestamp=1511671229363, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,623(10744) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,655(10776) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,725(10846) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,775(10896) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,811(10932) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:29,901(11022) --> [main] com.alibaba.dubbo.remoting.transport.netty.NettyHelper$DubboLogger.debug(NettyHelper.java:70):  [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:40:30,018(11139) --> [main] com.alibaba.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:69):  [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /192.168.79.140:20880, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:30,027(11148) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:40:30,080(11201) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.loadProperties(AbstractRegistry.java:232):  [DUBBO] Load registry store file C:\Users\lr12\.dubbo\dubbo-registry-localhost.cache, data: {nju.software.sjjh.mock.GsyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.GsyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.GsyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713426993, nju.software.interfaces.service.ProviderService:2.0.0=dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=7056&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511619882992&version=2.0.0 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=configurators&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1392&revision=2.0.0&side=consumer&timestamp=1511619884876&version=2.0.0 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=routers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=1392&revision=2.0.0&side=consumer&timestamp=1511619884876&version=2.0.0, nju.software.sjjh.webservice.IexportdtsService=empty://192.168.237.1:8892/nju.software.sjjh.webservice.IexportdtsService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.webservice.IexportdtsService&methods=login&organization=dubbox&owner=nju-software&pid=312&side=provider&timestamp=1501049192119, nju.software.interfaces.service.ProviderService:1.0.1=empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=providers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=configurators&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1 empty://192.168.79.140/nju.software.interfaces.service.ProviderService?application=consumer1&category=routers&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12968&revision=1.0.1&side=consumer&timestamp=1511602642417&version=1.0.1, nju.software.sjjh.bank.facade.CourtToBankWebService=empty://192.168.237.1:8892/nju.software.sjjh.bank.facade.CourtToBankWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.bank.facade.CourtToBankWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713426536, nju.software.interfaces.service.ProviderService:1.0.0=empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=7056&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511619880685&version=1.0.0, nju.software.sjjh.mock.NyyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.NyyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.NyyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427408, nju.software.sjjh.mock.ZsyhWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.ZsyhWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.ZsyhWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427890, nju.software.interfaces.service.ProviderService=empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=12000&retries=1&side=provider&timeout=3000&timestamp=1511593120071, nju.software.sjjh.bank.facade.BankWebService=empty://192.168.237.1:8892/nju.software.sjjh.bank.facade.BankWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.bank.facade.BankWebService&methods=requestAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713418087, nju.software.sjjh.mock.JxgyWebService=empty://192.168.237.1:8892/nju.software.sjjh.mock.JxgyWebService?anyhost=true&application=court-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=nju.software.sjjh.mock.JxgyWebService&methods=responseAsyncZhye&organization=dubbox&owner=nju-software&pid=15184&side=provider&timestamp=1500713427113}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:40:30,133(11254) --> [main] org.I0Itec.zkclient.ZkConnection.connect(ZkConnection.java:63): Creating new ZookKeeper instance to connect to localhost:2181.  
[INFO ] 2017-11-26 12:40:30,134(11255) --> [ZkClient-EventThread-21-localhost:2181] org.I0Itec.zkclient.ZkEventThread.run(ZkEventThread.java:64): Starting ZkClient event thread.  
[DEBUG] 2017-11-26 12:40:30,218(11339) --> [main] org.I0Itec.zkclient.ZkClient.connect(ZkClient.java:874): Awaiting connection to Zookeeper server  
[DEBUG] 2017-11-26 12:40:30,219(11340) --> [main] org.I0Itec.zkclient.ZkClient.waitForKeeperState(ZkClient.java:628): Waiting for keeper state SyncConnected  
[DEBUG] 2017-11-26 12:41:12,615(53736) --> [main-EventThread] org.I0Itec.zkclient.ZkClient.process(ZkClient.java:351): Received event: WatchedEvent state:SyncConnected type:None path:null  
[INFO ] 2017-11-26 12:41:12,619(53740) --> [main-EventThread] org.I0Itec.zkclient.ZkClient.processStateChanged(ZkClient.java:449): zookeeper state changed (SyncConnected)  
[DEBUG] 2017-11-26 12:41:12,619(53740) --> [main-EventThread] org.I0Itec.zkclient.ZkClient.process(ZkClient.java:395): Leaving process event  
[DEBUG] 2017-11-26 12:41:12,622(53743) --> [main] org.I0Itec.zkclient.ZkClient.waitForKeeperState(ZkClient.java:638): State is SyncConnected  
[INFO ] 2017-11-26 12:41:12,631(53752) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:302):  [DUBBO] Register: dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:12,766(53887) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:325):  [DUBBO] Subscribe: provider://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:12,882(54003) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:422):  [DUBBO] Notify urls for subscribe url provider://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0, urls: [empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0], dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:41:12,964(54085) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:41:13,053(54174) --> [main] com.alibaba.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClassCode(ExtensionLoader.java:943):  [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:13,256(54377) --> [main] com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:107):  [DUBBO] The service ready on spring started. service: nju.software.interfaces.service.ProviderService, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:13,373(54494) --> [main] com.alibaba.dubbo.config.ServiceConfig.exportLocal(ServiceConfig.java:510):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to local registry, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:13,375(54496) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:470):  [DUBBO] Export dubbo service nju.software.interfaces.service.ProviderService to url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511671273282&version=2.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:13,376(54497) --> [main] com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:481):  [DUBBO] Register dubbo service nju.software.interfaces.service.ProviderService url dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511671273282&version=2.0.0 to registry registry://localhost:2181/com.alibaba.dubbo.registry.RegistryService?application=doc-provider-app&dubbo=2.5.3&pid=16004&registry=zookeeper&timestamp=1511671273275, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:13,386(54507) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.register(AbstractRegistry.java:302):  [DUBBO] Register: dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511671273282&version=2.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:13,535(54656) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.subscribe(AbstractRegistry.java:325):  [DUBBO] Subscribe: provider://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511671273282&version=2.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:41:13,733(54854) --> [main] com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:422):  [DUBBO] Notify urls for subscribe url provider://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511671273282&version=2.0.0, urls: [empty://192.168.79.140:20880/nju.software.interfaces.service.ProviderService2?anyhost=true&application=doc-provider-app&category=configurators&check=false&default.service.filter=consumerLogFilter&dubbo=2.5.3&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=2.0.0&side=provider&timeout=3000&timestamp=1511671273282&version=2.0.0], dubbo version: 2.5.3, current host: 127.0.0.1  
[WARN ] 2017-11-26 12:43:30,944(192065) --> [New I/O server worker #1-1] com.alibaba.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:197):  [DUBBO] All clients has discontected from /192.168.79.140:20880. You can graceful shutdown now., dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:43:30,949(192070) --> [DubboServerHandler-192.168.79.140:20880-thread-2] com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:130):  [DUBBO] disconected from /192.168.79.140:51960,url:dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&channel.readonly.sent=true&codec=dubbo&default.service.filter=consumerLogFilter&dubbo=2.5.3&heartbeat=60000&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[WARN ] 2017-11-26 12:44:05,923(227044) --> [New I/O server worker #1-2] com.alibaba.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:197):  [DUBBO] All clients has discontected from /192.168.79.140:20880. You can graceful shutdown now., dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:44:05,935(227056) --> [DubboServerHandler-192.168.79.140:20880-thread-4] com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:130):  [DUBBO] disconected from /192.168.79.140:51973,url:dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&channel.readonly.sent=true&codec=dubbo&default.service.filter=consumerLogFilter&dubbo=2.5.3&heartbeat=60000&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[WARN ] 2017-11-26 12:46:27,135(368256) --> [New I/O server worker #1-3] com.alibaba.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:197):  [DUBBO] All clients has discontected from /192.168.79.140:20880. You can graceful shutdown now., dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:46:27,143(368264) --> [DubboServerHandler-192.168.79.140:20880-thread-6] com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:130):  [DUBBO] disconected from /192.168.79.140:52010,url:dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&channel.readonly.sent=true&codec=dubbo&default.service.filter=consumerLogFilter&dubbo=2.5.3&heartbeat=60000&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
[DEBUG] 2017-11-26 12:47:03,940(405061) --> [DubboServerHandler-192.168.79.140:20880-thread-8] com.alibaba.dubbo.remoting.transport.DecodeHandler.decode(DecodeHandler.java:60):  [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.5.3, current host: 127.0.0.1  
[WARN ] 2017-11-26 12:47:04,019(405140) --> [New I/O server worker #1-4] com.alibaba.dubbo.remoting.transport.AbstractServer.disconnected(AbstractServer.java:197):  [DUBBO] All clients has discontected from /192.168.79.140:20880. You can graceful shutdown now., dubbo version: 2.5.3, current host: 127.0.0.1  
[INFO ] 2017-11-26 12:47:04,026(405147) --> [DubboServerHandler-192.168.79.140:20880-thread-9] com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.disconnected(DubboProtocol.java:130):  [DUBBO] disconected from /192.168.79.140:52023,url:dubbo://192.168.79.140:20880/nju.software.interfaces.service.ProviderService?anyhost=true&application=doc-provider-app&channel.readonly.sent=true&codec=dubbo&default.service.filter=consumerLogFilter&dubbo=2.5.3&heartbeat=60000&interface=nju.software.interfaces.service.ProviderService&methods=sayHello&pid=16004&retries=1&revision=1.0.0&side=provider&timeout=3000&timestamp=1511671229385&version=1.0.0, dubbo version: 2.5.3, current host: 127.0.0.1  
